# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _topylogic
else:
    import _topylogic

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class stack_node(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_topylogic.stack_node_data_get, _topylogic.stack_node_data_set)
    next = property(_topylogic.stack_node_next_get, _topylogic.stack_node_next_set)

    def __init__(self):
        _topylogic.stack_node_swiginit(self, _topylogic.new_stack_node())
    __swig_destroy__ = _topylogic.delete_stack_node

# Register stack_node in _topylogic:
_topylogic.stack_node_swigregister(stack_node)

class stack(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    root = property(_topylogic.stack_root_get, _topylogic.stack_root_set)
    length = property(_topylogic.stack_length_get, _topylogic.stack_length_set)

    def __init__(self):
        _topylogic.stack_swiginit(self, _topylogic.new_stack())
    __swig_destroy__ = _topylogic.delete_stack

    def get(self, index):
        return _topylogic.stack_get(self, index)

    def pop(self):
        return _topylogic.stack_pop(self)

    def push(self, data):
        return _topylogic.stack_push(self, data)

# Register stack in _topylogic:
_topylogic.stack_swigregister(stack)


def init_stack():
    return _topylogic.init_stack()

def get(stack, index):
    return _topylogic.get(stack, index)

def pop(stack):
    return _topylogic.pop(stack)

def push(stack, data):
    return _topylogic.push(stack, data)

def destroy_stack(stack):
    return _topylogic.destroy_stack(stack)
class AVLNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_topylogic.AVLNode_data_get, _topylogic.AVLNode_data_set)
    id = property(_topylogic.AVLNode_id_get, _topylogic.AVLNode_id_set)
    height = property(_topylogic.AVLNode_height_get, _topylogic.AVLNode_height_set)
    left = property(_topylogic.AVLNode_left_get, _topylogic.AVLNode_left_set)
    right = property(_topylogic.AVLNode_right_get, _topylogic.AVLNode_right_set)

    def __init__(self):
        _topylogic.AVLNode_swiginit(self, _topylogic.new_AVLNode())
    __swig_destroy__ = _topylogic.delete_AVLNode

# Register AVLNode in _topylogic:
_topylogic.AVLNode_swigregister(AVLNode)

class AVLTree(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    root = property(_topylogic.AVLTree_root_get, _topylogic.AVLTree_root_set)
    size = property(_topylogic.AVLTree_size_get, _topylogic.AVLTree_size_set)

    def __init__(self):
        _topylogic.AVLTree_swiginit(self, _topylogic.new_AVLTree())
    __swig_destroy__ = _topylogic.delete_AVLTree

    def insert(self, data, id):
        return _topylogic.AVLTree_insert(self, data, id)

    def remove_ID(self, id):
        return _topylogic.AVLTree_remove_ID(self, id)

    def find(self, id):
        return _topylogic.AVLTree_find(self, id)

    def inorder(self, stack):
        return _topylogic.AVLTree_inorder(self, stack)

    def preorder(self, stack):
        return _topylogic.AVLTree_preorder(self, stack)

    def postorder(self, stack):
        return _topylogic.AVLTree_postorder(self, stack)

    def stackify(self, stack):
        return _topylogic.AVLTree_stackify(self, stack)

# Register AVLTree in _topylogic:
_topylogic.AVLTree_swigregister(AVLTree)


def init_avl():
    return _topylogic.init_avl()

def insert(tree, data, id):
    return _topylogic.insert(tree, data, id)

def remove_ID(tree, id):
    return _topylogic.remove_ID(tree, id)

def find(tree, id):
    return _topylogic.find(tree, id)

def inorder(tree, stack):
    return _topylogic.inorder(tree, stack)

def postorder(tree, stack):
    return _topylogic.postorder(tree, stack)

def preorder(tree, stack):
    return _topylogic.preorder(tree, stack)

def stackify(tree, stack):
    return _topylogic.stackify(tree, stack)

def destroy_avl(tree):
    return _topylogic.destroy_avl(tree)
ABORT = _topylogic.ABORT
WAIT = _topylogic.WAIT
CONTINUE = _topylogic.CONTINUE
MAX_ATTEMPTS = _topylogic.MAX_ATTEMPTS
THREAD_ATTEMPT_SLEEP = _topylogic.THREAD_ATTEMPT_SLEEP
PRINT = _topylogic.PRINT
RED = _topylogic.RED
BLACK = _topylogic.BLACK
TERMINATE = _topylogic.TERMINATE
NO_SNAP = _topylogic.NO_SNAP
START_STOP = _topylogic.START_STOP
NO_VERB = _topylogic.NO_VERB
VERTICES = _topylogic.VERTICES
EDGES = _topylogic.EDGES
FUNCTIONS = _topylogic.FUNCTIONS
GLOBALS = _topylogic.GLOBALS
class graph(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    context = property(_topylogic.graph_context_get, _topylogic.graph_context_set)
    mem_option = property(_topylogic.graph_mem_option_get, _topylogic.graph_mem_option_set)
    vertices = property(_topylogic.graph_vertices_get, _topylogic.graph_vertices_set)
    start = property(_topylogic.graph_start_get, _topylogic.graph_start_set)
    modify = property(_topylogic.graph_modify_get, _topylogic.graph_modify_set)
    remove_edges = property(_topylogic.graph_remove_edges_get, _topylogic.graph_remove_edges_set)
    remove_vertices = property(_topylogic.graph_remove_vertices_get, _topylogic.graph_remove_vertices_set)
    max_state_changes = property(_topylogic.graph_max_state_changes_get, _topylogic.graph_max_state_changes_set)
    max_loop = property(_topylogic.graph_max_loop_get, _topylogic.graph_max_loop_set)
    snapshot_timestamp = property(_topylogic.graph_snapshot_timestamp_get, _topylogic.graph_snapshot_timestamp_set)
    lvl_verbose = property(_topylogic.graph_lvl_verbose_get, _topylogic.graph_lvl_verbose_set)
    state_count = property(_topylogic.graph_state_count_get, _topylogic.graph_state_count_set)
    lock = property(_topylogic.graph_lock_get, _topylogic.graph_lock_set)
    color_lock = property(_topylogic.graph_color_lock_get, _topylogic.graph_color_lock_set)
    state = property(_topylogic.graph_state_get, _topylogic.graph_state_set)
    previous_color = property(_topylogic.graph_previous_color_get, _topylogic.graph_previous_color_set)
    print_flag = property(_topylogic.graph_print_flag_get, _topylogic.graph_print_flag_set)
    red_vertex_count = property(_topylogic.graph_red_vertex_count_get, _topylogic.graph_red_vertex_count_set)
    black_vertex_count = property(_topylogic.graph_black_vertex_count_get, _topylogic.graph_black_vertex_count_set)
    pause = property(_topylogic.graph_pause_get, _topylogic.graph_pause_set)
    red_locked = property(_topylogic.graph_red_locked_get, _topylogic.graph_red_locked_set)
    black_locked = property(_topylogic.graph_black_locked_get, _topylogic.graph_black_locked_set)
    num_vertices = property(_topylogic.graph_num_vertices_get, _topylogic.graph_num_vertices_set)
    pause_cond = property(_topylogic.graph_pause_cond_get, _topylogic.graph_pause_cond_set)
    red_fire = property(_topylogic.graph_red_fire_get, _topylogic.graph_red_fire_set)
    black_fire = property(_topylogic.graph_black_fire_get, _topylogic.graph_black_fire_set)

    def __init__(self, *args, **kwargs):
        _topylogic.graph_swiginit(self, _topylogic.new_graph(*args, **kwargs))
    __swig_destroy__ = _topylogic.delete_graph

# Register graph in _topylogic:
_topylogic.graph_swigregister(graph)

class vertex_result(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    vertex_argv = property(_topylogic.vertex_result_vertex_argv_get, _topylogic.vertex_result_vertex_argv_set)
    vertex_size = property(_topylogic.vertex_result_vertex_size_get, _topylogic.vertex_result_vertex_size_set)
    edge_argv = property(_topylogic.vertex_result_edge_argv_get, _topylogic.vertex_result_edge_argv_set)
    edge_size = property(_topylogic.vertex_result_edge_size_get, _topylogic.vertex_result_edge_size_set)

    def __init__(self, vertex_argv, edge_argv):
        _topylogic.vertex_result_swiginit(self, _topylogic.new_vertex_result(vertex_argv, edge_argv))
    __swig_destroy__ = _topylogic.delete_vertex_result

    def set_vertex_argv(self, vertex_argv):
        return _topylogic.vertex_result_set_vertex_argv(self, vertex_argv)

    def set_edge_argv(self, edge_argv):
        return _topylogic.vertex_result_set_edge_argv(self, edge_argv)

    def get_vertex_argv(self):
        return _topylogic.vertex_result_get_vertex_argv(self)

    def get_edge_argv(self):
        return _topylogic.vertex_result_get_edge_argv(self)

# Register vertex_result in _topylogic:
_topylogic.vertex_result_swigregister(vertex_result)

class shared_edge(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    vertex_data = property(_topylogic.shared_edge_vertex_data_get, _topylogic.shared_edge_vertex_data_set)
    edge_data = property(_topylogic.shared_edge_edge_data_get, _topylogic.shared_edge_edge_data_set)

    def __init__(self):
        _topylogic.shared_edge_swiginit(self, _topylogic.new_shared_edge())
    __swig_destroy__ = _topylogic.delete_shared_edge

# Register shared_edge in _topylogic:
_topylogic.shared_edge_swigregister(shared_edge)

class vertex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_topylogic.vertex_id_get, _topylogic.vertex_id_set)
    is_active = property(_topylogic.vertex_is_active_get, _topylogic.vertex_is_active_set)
    f = property(_topylogic.vertex_f_get, _topylogic.vertex_f_set)
    glbl = property(_topylogic.vertex_glbl_get, _topylogic.vertex_glbl_set)
    shared = property(_topylogic.vertex_shared_get, _topylogic.vertex_shared_set)
    lock = property(_topylogic.vertex_lock_get, _topylogic.vertex_lock_set)
    edge_tree = property(_topylogic.vertex_edge_tree_get, _topylogic.vertex_edge_tree_set)
    joining_vertices = property(_topylogic.vertex_joining_vertices_get, _topylogic.vertex_joining_vertices_set)
    context = property(_topylogic.vertex_context_get, _topylogic.vertex_context_set)
    graph = property(_topylogic.vertex_graph_get, _topylogic.vertex_graph_set)

    def __init__(self, graph, f, id, glbl=None):
        _topylogic.vertex_swiginit(self, _topylogic.new_vertex(graph, f, id, glbl))
    __swig_destroy__ = _topylogic.delete_vertex

    def modify_vertex(self, f, glbl):
        return _topylogic.vertex_modify_vertex(self, f, glbl)

    def modify_f(self, f):
        return _topylogic.vertex_modify_f(self, f)

    def modify_glbl(self, glbl):
        return _topylogic.vertex_modify_glbl(self, glbl)

    def modify_shared_edge_vars(self, edge_vars):
        return _topylogic.vertex_modify_shared_edge_vars(self, edge_vars)

# Register vertex in _topylogic:
_topylogic.vertex_swigregister(vertex)

class vertex_request(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    graph = property(_topylogic.vertex_request_graph_get, _topylogic.vertex_request_graph_set)
    id = property(_topylogic.vertex_request_id_get, _topylogic.vertex_request_id_set)
    f = property(_topylogic.vertex_request_f_get, _topylogic.vertex_request_f_set)
    glbl = property(_topylogic.vertex_request_glbl_get, _topylogic.vertex_request_glbl_set)

    def __init__(self, graph, id, f=None, glbl=None):
        _topylogic.vertex_request_swiginit(self, _topylogic.new_vertex_request(graph, id, f, glbl))
    __swig_destroy__ = _topylogic.delete_vertex_request

# Register vertex_request in _topylogic:
_topylogic.vertex_request_swigregister(vertex_request)

class mod_vertex_request(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    vertex = property(_topylogic.mod_vertex_request_vertex_get, _topylogic.mod_vertex_request_vertex_set)
    f = property(_topylogic.mod_vertex_request_f_get, _topylogic.mod_vertex_request_f_set)
    glbl = property(_topylogic.mod_vertex_request_glbl_get, _topylogic.mod_vertex_request_glbl_set)

    def __init__(self, vertex, f=None, glbl=None):
        _topylogic.mod_vertex_request_swiginit(self, _topylogic.new_mod_vertex_request(vertex, f, glbl))
    __swig_destroy__ = _topylogic.delete_mod_vertex_request

# Register mod_vertex_request in _topylogic:
_topylogic.mod_vertex_request_swigregister(mod_vertex_request)

class mod_edge_vars_request(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    vertex = property(_topylogic.mod_edge_vars_request_vertex_get, _topylogic.mod_edge_vars_request_vertex_set)
    edge_vars = property(_topylogic.mod_edge_vars_request_edge_vars_get, _topylogic.mod_edge_vars_request_edge_vars_set)

    def __init__(self, vertex, edge_vars=None):
        _topylogic.mod_edge_vars_request_swiginit(self, _topylogic.new_mod_edge_vars_request(vertex, edge_vars))
    __swig_destroy__ = _topylogic.delete_mod_edge_vars_request

# Register mod_edge_vars_request in _topylogic:
_topylogic.mod_edge_vars_request_swigregister(mod_edge_vars_request)

class destroy_vertex_request(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    graph = property(_topylogic.destroy_vertex_request_graph_get, _topylogic.destroy_vertex_request_graph_set)
    vertex = property(_topylogic.destroy_vertex_request_vertex_get, _topylogic.destroy_vertex_request_vertex_set)

    def __init__(self, graph, vertex):
        _topylogic.destroy_vertex_request_swiginit(self, _topylogic.new_destroy_vertex_request(graph, vertex))
    __swig_destroy__ = _topylogic.delete_destroy_vertex_request

# Register destroy_vertex_request in _topylogic:
_topylogic.destroy_vertex_request_swigregister(destroy_vertex_request)

class destroy_vertex_id_request(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    graph = property(_topylogic.destroy_vertex_id_request_graph_get, _topylogic.destroy_vertex_id_request_graph_set)
    id = property(_topylogic.destroy_vertex_id_request_id_get, _topylogic.destroy_vertex_id_request_id_set)

    def __init__(self, graph, id):
        _topylogic.destroy_vertex_id_request_swiginit(self, _topylogic.new_destroy_vertex_id_request(graph, id))
    __swig_destroy__ = _topylogic.delete_destroy_vertex_id_request

# Register destroy_vertex_id_request in _topylogic:
_topylogic.destroy_vertex_id_request_swigregister(destroy_vertex_id_request)

EDGE = _topylogic.EDGE
BI_EDGE = _topylogic.BI_EDGE
SELF_EDGE = _topylogic.SELF_EDGE
class edge(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_topylogic.edge_id_get, _topylogic.edge_id_set)
    f = property(_topylogic.edge_f_get, _topylogic.edge_f_set)
    glbl = property(_topylogic.edge_glbl_get, _topylogic.edge_glbl_set)
    a_vars = property(_topylogic.edge_a_vars_get, _topylogic.edge_a_vars_set)
    b_vars = property(_topylogic.edge_b_vars_get, _topylogic.edge_b_vars_set)
    a = property(_topylogic.edge_a_get, _topylogic.edge_a_set)
    b = property(_topylogic.edge_b_get, _topylogic.edge_b_set)
    edge_type = property(_topylogic.edge_edge_type_get, _topylogic.edge_edge_type_set)
    bi_edge = property(_topylogic.edge_bi_edge_get, _topylogic.edge_bi_edge_set)
    bi_edge_lock = property(_topylogic.edge_bi_edge_lock_get, _topylogic.edge_bi_edge_lock_set)

    def __init__(self, a, b, f, glbl=None):
        _topylogic.edge_swiginit(self, _topylogic.new_edge(a, b, f, glbl))
    __swig_destroy__ = _topylogic.delete_edge

    def modify_edge(self, f=None, glbl=None):
        return _topylogic.edge_modify_edge(self, f, glbl)

    def set_f(self, f):
        return _topylogic.edge_set_f(self, f)

    def set_glbl(self, glbl=None):
        return _topylogic.edge_set_glbl(self, glbl)

# Register edge in _topylogic:
_topylogic.edge_swigregister(edge)

class edge_request(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    a = property(_topylogic.edge_request_a_get, _topylogic.edge_request_a_set)
    b = property(_topylogic.edge_request_b_get, _topylogic.edge_request_b_set)
    f = property(_topylogic.edge_request_f_get, _topylogic.edge_request_f_set)
    glbl = property(_topylogic.edge_request_glbl_get, _topylogic.edge_request_glbl_set)

    def __init__(self, a, b, f=None, glbl=None):
        _topylogic.edge_request_swiginit(self, _topylogic.new_edge_request(a, b, f, glbl))
    __swig_destroy__ = _topylogic.delete_edge_request

# Register edge_request in _topylogic:
_topylogic.edge_request_swigregister(edge_request)

class destroy_edge_request(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    a = property(_topylogic.destroy_edge_request_a_get, _topylogic.destroy_edge_request_a_set)
    b = property(_topylogic.destroy_edge_request_b_get, _topylogic.destroy_edge_request_b_set)

    def __init__(self, a, b):
        _topylogic.destroy_edge_request_swiginit(self, _topylogic.new_destroy_edge_request(a, b))
    __swig_destroy__ = _topylogic.delete_destroy_edge_request

# Register destroy_edge_request in _topylogic:
_topylogic.destroy_edge_request_swigregister(destroy_edge_request)

class destroy_edge_id_request(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    a = property(_topylogic.destroy_edge_id_request_a_get, _topylogic.destroy_edge_id_request_a_set)
    id = property(_topylogic.destroy_edge_id_request_id_get, _topylogic.destroy_edge_id_request_id_set)

    def __init__(self, a, id):
        _topylogic.destroy_edge_id_request_swiginit(self, _topylogic.new_destroy_edge_id_request(a, id))
    __swig_destroy__ = _topylogic.delete_destroy_edge_id_request

# Register destroy_edge_id_request in _topylogic:
_topylogic.destroy_edge_id_request_swigregister(destroy_edge_id_request)

NONE = _topylogic.NONE
SINGLE = _topylogic.SINGLE
SWITCH = _topylogic.SWITCH
SWITCH_UNSAFE = _topylogic.SWITCH_UNSAFE


